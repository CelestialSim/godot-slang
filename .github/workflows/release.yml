name: Create Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Reuse the builds workflow to create artifacts
  build-artifacts:
    uses: ./.github/workflows/builds.yml
    permissions:
      contents: read

  # Create the release with the artifacts
  create-release:
    runs-on: ubuntu-latest
    needs: build-artifacts
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: prev-tag
        run: |
          # Get the latest tag before the current one
          PREV_TAG=$(git tag --sort=-version:refname | head -n 1)
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use the first commit
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "tag=$PREV_TAG" >> "$GITHUB_OUTPUT"
          echo "Previous tag: $PREV_TAG"

      - name: Generate release notes
        id: release-notes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get list of commits since the previous tag
          {
            echo "## What's Changed"
            echo ""
          } > release_notes.md
          
          # Get commits between previous tag and current HEAD
          PREV_TAG="${{ steps.prev-tag.outputs.tag }}"
          
          # Extract PR numbers from commit messages
          git log "${PREV_TAG}..HEAD" --oneline --grep="Merge pull request" --grep="(#" | \
            grep -oP '#\d+' | sort -u | while read -r pr_num; do
              # Remove the # prefix
              pr_num="${pr_num#\#}"
              # Get PR details
              gh pr view "$pr_num" --json title,number --jq '"* \(.title) (#\(.number))"' 2>/dev/null || true
            done >> release_notes.md
          
          # If no PRs found, add a message
          if [ ! -s release_notes.md ] || [ "$(wc -l < release_notes.md)" -le 2 ]; then
            echo "* No merged pull requests found" >> release_notes.md
          fi
          
          # Add contributors section
          {
            echo ""
            echo "## Contributors"
            git log "${PREV_TAG}..HEAD" --format="%an" | sort -u | sed 's/^/* /'
          } >> release_notes.md || true
          
          cat release_notes.md
          
          # Set output for use in create-release step
          {
            echo "notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download addon artifact
        uses: actions/download-artifact@v4
        with:
          name: godot-slang-addon-all-platforms
          path: ./artifacts

      - name: Download demo artifact
        uses: actions/download-artifact@v4
        with:
          name: godot-slang-demo-all-platforms
          path: ./artifacts

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create the tag at the current commit
          git tag ${{ inputs.tag }}
          git push origin ${{ inputs.tag }}
          
          # Create the release
          gh release create ${{ inputs.tag }} \
            --title "Release ${{ inputs.tag }}" \
            --notes "${{ steps.release-notes.outputs.notes }}" \
            ./artifacts/godot-slang-addon.zip \
            ./artifacts/godot-slang-demo.zip
