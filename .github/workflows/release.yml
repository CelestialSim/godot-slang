name: Release Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release'
        required: false
        default: 'latest'

env:
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

jobs:
  build-release:
    name: ðŸš€ Build Release
    runs-on: ubuntu-latest
    container:
      image: ubuntu:25.04
      options: --user root
    
    steps:
      - name: Install Git (required for checkout with submodules)
        run: |
          apt-get update
          apt-get install -y git ca-certificates
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up build environment
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            python3 \
            python3-pip \
            python3-venv \
            scons \
            pkg-config \
            libx11-dev \
            libxcursor-dev \
            libxinerama-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libasound2-dev \
            libpulse-dev \
            libudev-dev \
            libxi-dev \
            libxrandr-dev \
            libxss-dev \
            libssl-dev \
            zip
      
      - name: Set up Python virtual environment
        run: |
          python3 -m venv /opt/venv
          echo "/opt/venv/bin" >> $GITHUB_PATH
          /opt/venv/bin/pip install --upgrade pip
      
      - name: Install Python dependencies
        run: |
          if [ -f godot-cpp/pyproject.toml ]; then
            /opt/venv/bin/pip install -r godot-cpp/pyproject.toml || true
          fi
      
      - name: Build Slang generators
        run: |
          cd slang
          cmake --workflow --preset generators --fresh
          mkdir -p ../build-platform-generators
          cmake --install build --config Release --prefix ../build-platform-generators --component generators
      
      - name: Configure and build Slang
        run: |
          cd slang
          cmake \
            --preset default \
            --fresh \
            -DSLANG_LIB_TYPE=STATIC \
            -DSLANG_GENERATORS_PATH=../build-platform-generators/bin
          cmake --build --preset release --target slang
      
      - name: Build godot-slang extension (release)
        run: |
          scons target=template_release
      
      - name: Create demo package
        run: |
          # Copy license to demo folder if it exists
          if [ -f LICENSE ]; then
            cp LICENSE demo/
          fi
          
          # Create zip package of the demo folder
          zip -r godot-slang-demo.zip demo/
          
          # List package contents
          echo "Package contents:"
          unzip -l godot-slang-demo.zip
      
      - name: Upload demo package
        uses: actions/upload-artifact@v4
        with:
          name: godot-slang-demo-linux
          path: |
            godot-slang-demo.zip
            demo/
          retention-days: 90
      
      - name: Upload to release (if this is a release event)
        if: github.event_name == 'release'
        run: |
          # Install GitHub CLI
          apt-get update && apt-get install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh
          
          # Upload the release asset using gh CLI
          gh release upload ${{ github.event.release.tag_name }} godot-slang-demo.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
